import Metashape
import os
from datetime import datetime


d_time_cut = 12  # –ø–æ—Ä–æ–≥–æ–≤–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ –≤—Ä–µ–º–µ–Ω–∏ –≤ —Å–µ–∫ –¥–ª—è –≥—Ä—É–ø–ø–∏—Ä–æ–≤–∫–∏ —Ñ–æ—Ç–æ –ø–æ –º–∏—Å—Å–∏—è–º

custom_cameras_time = {'ILX-LR1': 200, 'FC6310' : 200, 'FC6310R' : 20}


def group_by_time(photo_time: dict, chunk, time_cut):

    prev_time = None
    photo_time_diff = {}
    group = 1  
    photo_calibration_group = {}

    for photo, time in photo_time.items():
        if prev_time is None:
            photo_time_diff[photo] = 0  # –¥–ª—è –ø–µ—Ä–≤–æ–≥–æ —Ñ–æ—Ç–æ —Ä–∞–∑–Ω–∏—Ü–∞ –≤–æ –≤—Ä–µ–º–µ–Ω–∏ –±—É–¥–µ—Ç 0
        else:
            time_diff = (time - prev_time).total_seconds()  # –≤ —Å–µ–∫—É–Ω–¥–∞—Ö —Ä–∞–∑–Ω–∏—Ü–∞ –º–µ–∂–¥—É datatime
            photo_time_diff[photo] = time_diff
        prev_time = time  # –æ–±–Ω–æ–≤–ª—è–µ–º prev_time –Ω–∞ —Ç–µ–∫—É—â–µ–µ –≤—Ä–µ–º—è

    # –≥—Ä—É–ø–ø–∏—Ä—É–µ–º —Ñ–æ—Ç–æ –ø–æ —Å–∫–∞—á–∫–∞–º –≤—Ä–µ–º–µ–Ω–∏ 
    for k, v in photo_time_diff.items():
        if v > time_cut:
            group += 1  # –µ—Å–ª–∏ —Ä–∞–∑–Ω–∏—Ü–∞ –≤–æ –≤—Ä–µ–º–µ–Ω–∏ –±–æ–ª—å—à–µ –ø–æ—Ä–æ–≥–∞, –Ω–æ–≤–∞—è –≥—Ä—É–ø–ø–∞
        photo_calibration_group[k] = group

    time_sensors = {} # –≥—Ä—É–ø–ø—ã –∫–∞–ª–∏–±—Ä–æ–≤–∫–∏ 

    for camera in chunk.cameras:
        photo_name = os.path.basename(camera.photo.path)  # –∏–º—è —Ñ–æ—Ç–æ
        group_value = photo_calibration_group.get(photo_name)  # –ø–æ–ª—É—á–∞–µ–º –≥—Ä—É–ø–ø—É (—á—Ç–æ –µ—Å—Ç—å —Å–ª–µ–¥—É—é—â–∏–π —Å–∫–∞—á–æ–∫)  –∏–∑ —Å–ª–æ–≤–∞—Ä—è

        if group_value:
            # –ï—Å–ª–∏ —Å–µ–Ω—Å–æ—Ä –¥–ª—è —ç—Ç–æ–π –≥—Ä—É–ø–ø—ã –ø–æ –≤—Ä–µ–º–µ–Ω–∏ –µ—â—ë –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç, —Å–æ–∑–¥–∞—ë–º –µ–≥–æ
            if group_value not in time_sensors:
                # –°–æ–∑–¥–∞—ë–º –Ω–æ–≤—ã–π —Å–µ–Ω—Å–æ—Ä –¥–ª—è —ç—Ç–æ–π –≥—Ä—É–ø–ø—ã
                new_sensor = chunk.addSensor()
                new_sensor.label = f"TimeMission{group_value}"
                time_sensors[group_value] = new_sensor

                current_sensor = camera.sensor  
                if current_sensor:
                    # –∫–∫–æ–ø–∏—Ä—É–µ–º –ø–∞—Ä–∞–º–µ—Ç—Ä—ã —Ñ–æ—Ç–æ
                    new_sensor.pixel_size = current_sensor.pixel_size 
                    new_sensor.width = current_sensor.width
                    new_sensor.height = current_sensor.height
                    new_sensor.focal_length = current_sensor.focal_length
                    new_sensor.calibration = current_sensor.calibration

            # –Ω–∞–∑–Ω–∞—á–∞–µ–º –∫–∞–º–µ—Ä—É –≤ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–∏–π —Å–µ–Ω—Å–æ—Ä —Ç–∏–ø–∞ –≥—Ä—É–ø–ø—ã
            camera.sensor = time_sensors[group_value]

    print('working group_by_time...')# —ç—Ç–æ —á–∏—Å—Ç–æ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –≤ –∫–æ–Ω—Å–æ–ª–∏ –≤—ã–≤–æ–¥–∞ –¥–∞–ª–µ–µ
    for k,v in photo_time.items():
        group = photo_calibration_group.get(k)
        diff = photo_time_diff.get(k)
        print(f'{k} {v} diff {diff} in {group} group/mission') 


def main():
    doc = Metashape.app.document
    chunk = doc.chunk
    photo_time = {}   # —Ñ–æ—Ç–æ –∏ date time 
    model = set()

    for camera in chunk.cameras:
        if camera.photo: 
            photo = os.path.basename(camera.photo.path)
            date_time = camera.photo.meta["Exif/DateTime"]
            model.add(camera.photo.meta['Exif/Model'])
            if date_time:
                parsed_datetime = datetime.strptime(date_time, "%Y:%m:%d %H:%M:%S")
                photo_time[photo] = parsed_datetime
            else:
                print('error! EXIF does not contain meta Exif/DateTime\nexit')

    sorted_photo_time = dict(sorted(photo_time.items(), key=lambda x: x[1]))  # —Å–æ—Ä—Ç–∏—Ä—É–µ–º —Ç.–∫. –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é –≤ –º—à —Å–æ—Ä—Ç–∏—Ä–æ–≤–∫–∞ –ø–æ –Ω–∞–∑–≤–∞–Ω–∏—é —Ñ–æ—Ç–æ, –±—É–∫–≤—ã -> —Ü–∏—Ñ—Ä—ã –∏ –Ω–µ —É—á–∏—Ç—ã–≤–∞–µ—Ç –≤—Ä–µ–º—è —Å–æ–∑–¥–∞–Ω–∏—è —Ñ–æ—Ç–æ

    if len(model) == 1:
        camera = next(iter(model)) 
        time_cut = custom_cameras_time.get(camera, d_time_cut)  # –±–µ—Ä—ë–º –∑–Ω–∞—á–µ–Ω–∏–µ –¥–ª—è —Ä–∞–∑–±–∏–≤–∫–∏ –∏–∑ —Å–ª–æ–≤–∞—Ä—è, –µ—Å–ª–∏ –Ω–µ—Ç —Ç–æ –±–µ—Ä—ë–º –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é 

    group_by_time(sorted_photo_time, chunk, time_cut)

Metashape.app.addMenuItem("üõ† GIS scripts/TimeGroup [group_by_time.py]", main)


