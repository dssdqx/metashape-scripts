import Metashape
import os
import math
from datetime import datetime


d_time_cut = 12  # –ø–æ—Ä–æ–≥–æ–≤–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ –≤—Ä–µ–º–µ–Ω–∏ –≤ —Å–µ–∫ –¥–ª—è –≥—Ä—É–ø–ø–∏—Ä–æ–≤–∫–∏ —Ñ–æ—Ç–æ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é 

custom_cameras_time = {'ILX-LR1': 200, 'FC6310' : 200, 'FC6310R' : 20}


def prepare_diff(photo_time: dict):
    sorted_photo_time = dict(sorted(photo_time.items(), key=lambda x: x[1]))  # —Å–æ—Ä—Ç–∏—Ä—É–µ–º —Ç.–∫. –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é –≤ –º—à —Å–æ—Ä—Ç–∏—Ä–æ–≤–∫–∞ –ø–æ –Ω–∞–∑–≤–∞–Ω–∏—é —Ñ–æ—Ç–æ, –±—É–∫–≤—ã -> —Ü–∏—Ñ—Ä—ã –∏ –Ω–µ —É—á–∏—Ç—ã–≤–∞–µ—Ç –≤—Ä–µ–º—è —Å–æ–∑–¥–∞–Ω–∏—è —Ñ–æ—Ç–æ
    prev_time = None
    photo_diff = {}

    for photo, time in sorted_photo_time.items():
        if prev_time is None:
            photo_diff[photo] = 0  # –¥–ª—è –ø–µ—Ä–≤–æ–≥–æ —Ñ–æ—Ç–æ —Ä–∞–∑–Ω–∏—Ü–∞ –≤–æ –≤—Ä–µ–º–µ–Ω–∏ –±—É–¥–µ—Ç 0
        else:
            time_diff = (time - prev_time).total_seconds()  # –≤ —Å–µ–∫—É–Ω–¥–∞—Ö —Ä–∞–∑–Ω–∏—Ü–∞ –º–µ–∂–¥—É datatime
            photo_diff[photo] = time_diff
        prev_time = time  # –æ–±–Ω–æ–≤–ª—è–µ–º prev_time –Ω–∞ —Ç–µ–∫—É—â–µ–µ –≤—Ä–µ–º—è

    return photo_diff


def statistic_time(data: list):
    mean = round(sum(data) / len(data),1)
    variance = sum((x - mean) ** 2 for x in data) / len(data)
    stddev = math.sqrt(variance)
    print(f'severance time MEAN: {mean}, stddev: {stddev}')

def divide(photo_time_diff: dict, chunk, time_cut: int, original_psz_cal: dict):

    group_counter = {}
    photo_cal_group = {} # —Ñ–æ—Ç–æ - –∫–∞–ª–∏–±—Ä–æ–≤–∫–∞ —Å —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ–º –∏—Å—Ö–æ–¥–Ω–æ–π
    time_sensors = {}  

    for photo, time in photo_time_diff.items():
        original_value = original_psz_cal.get(photo)

        if original_value not in group_counter: # –ï—Å–ª–∏ –≥—Ä—É–ø–ø–∞ –µ—â–µ –Ω–µ –±—ã–ª–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–∞, –Ω–∞—á–∏–Ω–∞–µ–º —Å 1
            group_counter[original_value] = 1


        if time > time_cut and time != 0:
            group_counter[original_value] += 1


        group_value = f"{original_value}_{group_counter[original_value]}"  # –¥–ª—è –≥—Ä—É–ø–ø—ã original_value –¥–æ–±–∞–≤–ª—è–µ–º –Ω–æ–º–µ—Ä
        photo_cal_group[photo] = group_value

        print(f'{photo} o_cal {original_value} diff {time} new group name {group_value}')

    # –ù–∞–∑–Ω–∞—á–∞–µ–º –∫–∞–º–µ—Ä—ã –≤ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–∏–µ –≥—Ä—É–ø–ø—ã
    for camera in chunk.cameras:
        photo_name = os.path.basename(camera.photo.path)
        group_value = photo_cal_group.get(photo_name)

        if group_value not in time_sensors:
            new_sensor = chunk.addSensor()
            new_sensor.label = f"TimeMission{group_value}"
            time_sensors[group_value] = new_sensor

            current_sensor = camera.sensor
            if current_sensor:
                new_sensor.pixel_size = current_sensor.pixel_size
                new_sensor.width = current_sensor.width
                new_sensor.height = current_sensor.height
                new_sensor.focal_length = current_sensor.focal_length
                new_sensor.calibration = current_sensor.calibration

        camera.sensor = time_sensors[group_value]

    print(f'SAVED original calibration separation + grouped by time')

def group_by_time(photo_time_diff: dict, chunk, time_cut):

    group = 1  
    photo_calibration_group = {}
    
    # –≥—Ä—É–ø–ø–∏—Ä—É–µ–º —Ñ–æ—Ç–æ –ø–æ —Å–∫–∞—á–∫–∞–º –≤—Ä–µ–º–µ–Ω–∏ 
    for k, v in photo_time_diff.items():
        if v > time_cut:
            group += 1  # –µ—Å–ª–∏ —Ä–∞–∑–Ω–∏—Ü–∞ –≤–æ –≤—Ä–µ–º–µ–Ω–∏ –±–æ–ª—å—à–µ –ø–æ—Ä–æ–≥–∞, –Ω–æ–≤–∞—è –≥—Ä—É–ø–ø–∞
        photo_calibration_group[k] = group

    time_sensors = {} # –≥—Ä—É–ø–ø—ã –∫–∞–ª–∏–±—Ä–æ–≤–∫–∏ —Ç—É—Ç –±—É–¥—É—Ç

    for camera in chunk.cameras:
        photo_name = os.path.basename(camera.photo.path)  # –∏–º—è —Ñ–æ—Ç–æ
        group_value = photo_calibration_group.get(photo_name)  # –ø–æ–ª—É—á–∞–µ–º –≥—Ä—É–ø–ø—É (—á—Ç–æ –µ—Å—Ç—å —Å–ª–µ–¥—É—é—â–∏–π —Å–∫–∞—á–æ–∫)  –∏–∑ —Å–ª–æ–≤–∞—Ä—è

        if group_value:
            # –ï—Å–ª–∏ —Å–µ–Ω—Å–æ—Ä –¥–ª—è —ç—Ç–æ–π –≥—Ä—É–ø–ø—ã –ø–æ –≤—Ä–µ–º–µ–Ω–∏ –µ—â—ë –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç, —Å–æ–∑–¥–∞—ë–º –µ–≥–æ
            if group_value not in time_sensors:
                # –°–æ–∑–¥–∞—ë–º –Ω–æ–≤—ã–π —Å–µ–Ω—Å–æ—Ä –¥–ª—è —ç—Ç–æ–π –≥—Ä—É–ø–ø—ã
                new_sensor = chunk.addSensor()
                new_sensor.label = f"TimeMission{group_value}"
                time_sensors[group_value] = new_sensor

                current_sensor = camera.sensor  
                if current_sensor:
                    # –∫–∫–æ–ø–∏—Ä—É–µ–º –ø–∞—Ä–∞–º–µ—Ç—Ä—ã —Ñ–æ—Ç–æ
                    new_sensor.pixel_size = current_sensor.pixel_size 
                    new_sensor.width = current_sensor.width
                    new_sensor.height = current_sensor.height
                    new_sensor.focal_length = current_sensor.focal_length
                    new_sensor.calibration = current_sensor.calibration

            # –Ω–∞–∑–Ω–∞—á–∞–µ–º –∫–∞–º–µ—Ä—É –≤ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–∏–π —Å–µ–Ω—Å–æ—Ä —Ç–∏–ø–∞ –≥—Ä—É–ø–ø—ã
            camera.sensor = time_sensors[group_value]

    print('working group_by_time...')# —ç—Ç–æ —á–∏—Å—Ç–æ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –≤ –∫–æ–Ω—Å–æ–ª–∏ –≤—ã–≤–æ–¥–∞ –¥–∞–ª–µ–µ
    for k,v in photo_time_diff.items():
        group = photo_calibration_group.get(k)
        diff = photo_time_diff.get(k)
        print(f'{k} {v} diff {diff} in {group} group/mission') 
    print('done!')


def main():
    doc = Metashape.app.document
    chunk = doc.chunk
    photo_time = {}   # —Ñ–æ—Ç–æ –∏ date time 
    model = set() # –º–æ–¥–µ–ª—å –∫–∞–º–µ—Ä—ã
    original_psz_cal = {} # –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω–∞—è –∫–∞–ª–∏–±—Ä–æ–≤–∫–∞, –µ—Å–ª–∏ –µ—Å—Ç—å
    count_original_cal = set()
    
    for camera in chunk.cameras:
        if camera.photo:  # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —Ñ–æ—Ç–æ –≤ —á–∞–Ω–∫–µ –∏ exif
            photo = os.path.basename(camera.photo.path)
            date_time = camera.photo.meta["Exif/DateTime"]
            model.add(camera.photo.meta['Exif/Model'])

            original_psz_cal[photo] = camera.sensor.key
            count_original_cal.add(camera.sensor.key)

            if date_time:
                parsed_datetime = datetime.strptime(date_time, "%Y:%m:%d %H:%M:%S")
                photo_time[photo] = parsed_datetime
            else:
                print('error! EXIF does not contain meta Exif/DateTime\nexit')
                return
        else:
            return

    photo_time_diff = prepare_diff(photo_time)
    statistic_time(list(photo_time_diff.values())) # –ø—Ä–æ—Å—Ç–æ –∏–Ω—Ñ–æ –Ω–µ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –ø–æ–∫–∞ 

    if len(model) == 1:
        camera = next(iter(model)) # –±–µ—Ä—ë–º –ø–µ—Ä–≤–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ –∏–∑ –º–Ω–æ–∂–µ—Å—Ç–≤–∞
        global d_time_cut  # –∏–∑–º–µ–Ω—è–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—É—é –≥–ª–æ–±–∞–ª—å–Ω–æ –¥–ª—è –Ω–æ—Ä–º –≤—ã–∑–æ–≤–∞ –¥–∞–ª—å—à–µ –≤ –¥—Ä—É–≥–æ–π –≤–µ—Ç–∫–µ 
        d_time_cut = custom_cameras_time.get(camera, d_time_cut)  # –±–µ—Ä—ë–º –∑–Ω–∞—á–µ–Ω–∏–µ –¥–ª—è —Ä–∞–∑–±–∏–≤–∫–∏ –∏–∑ —Å–ª–æ–≤–∞—Ä—è, –µ—Å–ª–∏ –Ω–µ—Ç —Ç–æ –±–µ—Ä—ë–º –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é 

    if len(count_original_cal) > 1:
        print(f'there are {len(count_original_cal)} original calibration groups in project. we will SAVE them when grouping by time.\nIf not needed, just merge the groups in the calibration menu')
        divide(photo_time_diff, chunk, d_time_cut, original_psz_cal)

    else:
        group_by_time(photo_time_diff, chunk, d_time_cut)

Metashape.app.addMenuItem("üõ† GIS scripts/TimeGroup [group_by_time.py]", main)




#camera.sensor.key   - –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä –µ—Å–ª–∏ –±—ã–ª–∏ –ø–µ—Ä–≤–æ–Ω–∞—á–∞–ª—å–Ω—ã–µ –≥—Ä—É–ø–ø—ã –≤ –ø—Ä–æ–µ–∫—Ç–µ, —Ä–∞–∑–Ω—ã–µ –¥—Ä–æ–Ω—ã –∏–ª–∏ dewarping on\off